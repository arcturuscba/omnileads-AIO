; This macro will override dialout in freepbx and will track in Asternic outbound
; calls only if the accountcode is set for the Agent device. The Accountcode will
; be the queue name for the outobund call.
;
; This version will follow failover routes. For that to work execincludes must be
; enabled in the options section in /etc/asterisk/asterisk.conf . The script
; /usr/local/parselog/generate_outbound_route_context.php must also be in place 
; Asterisk must be restarted if execincludes or other options in asterisk.conf is
; added/modified/removed.

[macro-dialout-trunk-predial-hook]
exten => s,1,Noop(Test Track Outbound)
exten => s,n,Noop(Trunk is ${OUT_${DIAL_TRUNK}})
exten => s,n,Noop(Dialout number is ${OUTNUM})
exten => s,n,Noop(Dial options are ${DIAL_TRUNK_OPTIONS})
exten => s,n,Set(QDIALER_AGENT=${DB(AMPUSER/${AMPUSER}/cidname)})
exten => s,n,GotoIf($["${QDIALER_AGENT}" != ""]?nextcheck)
exten => s,n,Noop(NO AMPUSER, exit normally with no tracking outbound)
exten => s,n,MacroExit()
exten => s,n(nextcheck),GotoIf($["${CDR(accountcode)}" != ""]?bypass)
exten => s,n,Noop(NO ACCOUNTCODE, exit normally with no tracking outbound)
exten => s,n,MacroExit()
exten => s,n(bypass),Set(PREDIAL_HOOK_RET=BYPASS)
exten => s,n,Goto(queuedial,${OUTNUM},1)
exten => s,n,MacroExit()

;; Dialplan for storing OUTBOUND campaing in queue_log
;; Goto(queuedial,YYYXXXXXXXX,1) where YYY is the queue-campaign code
;; and XXXXXXXX is the number to dial.
;; The queuedial context has the outobound trunk hardcoded

[queuedial]
; this piece of dialplan is just a calling hook into the [qlog-queuedial] context that actually does the
; outbound dialing - replace as needed - just fill in the same variables.
exten => _X.,1,Set(QDIALER_QUEUE=${CDR(accountcode)})
;exten => _X.,n,Set(QDIALER_AGENT=Agent/${AMPUSER})
exten => _X.,n,Set(QDIALER_AGENT=${DB(AMPUSER/${AMPUSER}/cidname)})
exten => _X.,n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
exten => _X.,n,Set(QueueName=${QDIALER_QUEUE})
exten => _X.,n,Gosub(find-route-number,${EXTEN},1)
exten => _X.,n,Goto(qlog-queuedial,${EXTEN},1)

[qlog-queuedial]
; We use a global variable to pass values back from the answer-detect macro.
; STATUS = U unanswered
;        = A answered    (plus CAUSECOMPLETE=C when callee hung up)
; The 'g' dial parameter must be used in order to track callee disconnecting.
; Note that we'll be using the 'h' hook in any case to do the logging when channels go down.
;
exten => _X.,1,NoOp(Outbound call -> A:${QDIALER_AGENT} N:${EXTEN} Q:${QDIALER_QUEUE} Ch:${QDIALER_CHANNEL})

exten => _X.,n,Set(OUTBOUND_GROUP=OUT_${DIAL_TRUNK})
exten => _X.,n,GotoIf($["${OUTMAXCHANS_${DIAL_TRUNK}}foo" = "foo"]?nomax)
exten => _X.,n,GotoIf($[ ${GROUP_COUNT(OUT_${DIAL_TRUNK})} >= ${OUTMAXCHANS_${DIAL_TRUNK}} ]?chanfull)
exten => _X.,n(nomax),GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?skipoutcid)
exten => _X.,n,Set(DIAL_TRUNK_OPTIONS=${TRUNK_OPTIONS})
exten => _X.,n,Macro(outbound-callerid,${DIAL_TRUNK})
exten => _X.,n(skipoutcid),GosubIf($["${PREFIX_TRUNK_${DIAL_TRUNK}}" != ""]?sub-flp-${DIAL_TRUNK},s,1)
exten => _X.,n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
exten => _X.,n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
exten => _X.,n,ExecIf($[$["${MOHCLASS}" != "default"] & $["${MOHCLASS}" != ""]]?Set(DIAL_TRUNK_OPTIONS=M(setmusic^${MOHCLASS})${DIAL_TRUNK_OPTIONS}))

exten => _X.,n,Set(ST=${EPOCH})
exten => _X.,n,Set(GM=${REPLACE(QDIALER_AGENT, ,_)})
exten => _X.,n,Set(GLOBAL(${GM})=U)
exten => _X.,n,Set(GLOBAL(${GM}ans)=0)
exten => _X.,n,Macro(queuelog,${ST},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ENTERQUEUE,-,${EXTEN})

exten => _X.,n,GotoIf($["${custom}" = "AMP"]?customtrunk)

exten => _X.,n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST})${DIAL_TRUNK_OPTIONS})
exten => _X.,n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
exten => _X.,n,Goto(enddial)

exten => _X.,n(customtrunk),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
exten => _X.,n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
exten => _X.,n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
exten => _X.,n,GotoIf($["${the_num}" = "OUTNUM"]?outnum:skipoutnum)
exten => _X.,n(outnum),Set(the_num=${OUTNUM})
exten => _X.,n(skipoutnum),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_TRUNK_OPTIONS})
exten => _X.,n,Goto(enddial)

exten => _X.,n(chanfull),Noop(max channels used up)
exten => _X.,n(enddial),Noop(End first dial)

exten => _X.,n,GotoIf($["${CAUSECOMPLETE}" = "C"]?callok)
exten => _X.,n,GotoIf($["${FAILOVERTRUNKS}" = ""]?callok)

; Do a failover loop
exten => _X.,n,Noop(Failed trunk call)
exten => _X.,n,Set(WT=$[${EPOCH} - ${ST}])
exten => _X.,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},OUTFAIL,1,1,${WT})
exten => _X.,n,Set(i=1)
exten => _X.,n,While($[${i}<=${FIELDQTY(FAILOVERTRUNKS,\,)}])
exten => _X.,n,Set(DIAL_TRUNK=${CUT(FAILOVERTRUNKS,\,,${i})})
exten => _X.,n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
exten => _X.,n,Noop(The new qdialer channel is ${QDIALER_CHANNEL})

exten => _X.,n,Set(OUTBOUND_GROUP=OUT_${DIAL_TRUNK})
exten => _X.,n,GotoIf($["${OUTMAXCHANS_${DIAL_TRUNK}}foo" = "foo"]?nomaxloop)
exten => _X.,n,GotoIf($[ ${GROUP_COUNT(OUT_${DIAL_TRUNK})} >= ${OUTMAXCHANS_${DIAL_TRUNK}} ]?chanfullloop)
exten => _X.,n(nomaxloop),GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?skipoutcidloop)
exten => _X.,n,Set(DIAL_TRUNK_OPTIONS=${TRUNK_OPTIONS})
exten => _X.,n,Macro(outbound-callerid,${DIAL_TRUNK})
exten => _X.,n(skipoutcidloop),GosubIf($["${PREFIX_TRUNK_${DIAL_TRUNK}}" != ""]?sub-flp-${DIAL_TRUNK},s,1)
exten => _X.,n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
exten => _X.,n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
exten => _X.,n,ExecIf($[$["${MOHCLASS}" != "default"] & $["${MOHCLASS}" != ""]]?Set(DIAL_TRUNK_OPTIONS=M(setmusic^${MOHCLASS})${DIAL_TRUNK_OPTIONS}))

exten => _X.,n,GotoIf($["${custom}" = "AMP"]?customtrunkloop)

exten => _X.,n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST})${DIAL_TRUNK_OPTIONS})
exten => _X.,n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
exten => _X.,n,Goto(enddialloop)

exten => _X.,n(customtrunkloop),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
exten => _X.,n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
exten => _X.,n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
exten => _X.,n,GotoIf($["${the_num}" = "OUTNUM"]?outnumloop:skipoutnumloop)
exten => _X.,n(outnumloop),Set(the_num=${OUTNUM})
exten => _X.,n(skipoutnumloop),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_TRUNK_OPTIONS})
exten => _X.,n,Goto(enddialloop)

exten => _X.,n(chanfullloop),Noop(max channels used up in failover loop)
exten => _X.,n(enddialloop),Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
exten => _X.,n,GotoIf($["${CAUSECOMPLETE}" = "C"]?callok)

exten => _X.,n,Set(i=$[${i}+1])
exten => _X.,n,EndWhile

exten => _X.,n(callok),Noop(Call completed ok, or end failover loop)


; Trapping call termination here
exten => h,1,NoOp( "Call exiting: status ${GLOBAL(${GM})} answered at: ${GLOBAL(${GM}ans)} DS: ${DIALSTATUS}"  )
exten => h,n,Set(DB(LASTDIAL/${QDIALER_AGENT})=${EPOCH})
exten => h,n,Goto(case-${GLOBAL(${GM})})
exten => h,n,Hangup()

; Call unanswered, last attempt
exten => h,n(case-U),Set(WT=$[${EPOCH} - ${ST}])
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ABANDON,1,1,${WT})
exten => h,n,Hangup()

; call answered: agent/callee hung
exten => h,n(case-A),Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
exten => h,n,Set(WT=$[${GLOBAL(${GM}ans)} - ${ST}])
exten => h,n,Set(CT=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},${COMPLETE},${WT},${CT})
exten => h,n,UserEvent(AgentComplete,Queue: ${QDIALER_QUEUE},TalkTime: ${CT},Channel: ${CHANNEL})
exten => h,n,Hangup()


[macro-queuedial-answer]
; Expecting $ARG1: uniqueid of the caller channel
;           $ARG2: global variable to store the answer results
;           $ARG3: queue name
;           $ARG4: agent name
;           $ARG5: enterqueue
;
exten => s,1,NoOp("Macro: queuedial-answer UID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
exten => s,n,Set(QDIALER_QUEUE=${ARG3})
exten => s,n,MixMonitor(out-${QDIALER_QUEUE}-${ARG1}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${ARG1} out-${QDIALER_QUEUE}-${ARG1}.wav)
exten => s,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(WD=$[${NOW} - ${ARG5}])
exten => s,n,Macro(queuelog,${NOW},${ARG1},${ARG3},${ARG4},CONNECT,${WD})
exten => s,n,Set(GLOBAL(${ARG2})=A)
exten => s,n,Set(GLOBAL(${ARG2}ans)=${NOW})
exten => s,n,NoOp("Macro queuedial-answer terminating" )

[macro-queuelog]
; The advantage of using this macro is that you can choose whether to use the Shell version
; (where you have complete control of what gets written) or the Application version (where you
; do not need a shellout, so it's way faster).
;
; Expecting  $ARG1: Timestamp
;            $ARG2: Call-id
;            $ARG3: Queue
;            $ARG4: Agent
;            $ARG5: Verb
;            $ARG6: Param1
;            $ARG7: Param2
;            $ARG8: Param3
;
;exten => s,1,System( echo "${ARG1},${ARG2},${ARG3,${ARG4},${ARG5},${ARG6},${ARG7},${ARG8}" >> /var/log/asterisk/queue_log )
exten => s,1,QueueLog(${ARG3},${ARG2},${ARG4},${ARG5},${ARG6}|${ARG7}|${ARG8})

#exec /usr/bin/php /usr/local/parselog/generate_outbound_route_context.php

