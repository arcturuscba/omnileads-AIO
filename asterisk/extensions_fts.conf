[fts-agentes]
exten => _XXXX,1,Dial(SIP/${EXTEN},,tT)
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     LLAMADAS SALIENTES ASIGNADAS A AGENTES CON LOGIN    FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

[macro-dialout-trunk-predial-hook]
exten => s,1,Noop(Veo si la llamada saliente la procesa Asternic)
same => n,Noop(Veo si la llamada saliente la procesa Asternic)
same => n,NoOp(id campana asociada ${SIP_HEADER(Idcamp)})
same => n,NoOp(nombre campana asociada ${SIP_HEADER(Nomcamp)})
same => n,GotoIf($["${SIP_HEADER(Nomcamp)}" != ""]?okcall) ; esto se hace con nombre_campaña llamada manual
;same => n,GotoIf($["${CAMPANA}" != ""]?:noCamp) ; esto se hace con nombre_campaña llamada dialer
same => n,Noop(No es MANUALCALL por ende reviso si es CLICK2CALL)
same => n,GotoIf($["${nomCamp}" != ""]?okcall) ; esto se hace con nombre_campaña llamada manual
same => n,Noop(NO HAY nombre_campaña, salgo de aqui y sigo por el extensions_additional.conf)
same => n,Noop(NO HAY nombre_campaña, salgo de aqui y sigo por el extensions_additional.conf)
same => n,MacroExit()
; preparo las variables de canal para avanzar sobre los tipicos dialplans de omnileadsdialplan_oubound_freepbx 
same => n,NoOp(La llamada se sigue procesando por Omnileads Dialplan - Click2Call)
same => n,Set(CALLTYPE=dialer)
same => n,Set(IdCamp = ${ID_CAMPANA})
same => n,Set(CodCli = ${ID_CLIENTE})
same => n,Set(QDIALER_AGENT=Discador-${CAMPANA})
same => n,Set(QDIALER_QUEUE=${CAMPANA})
same => n,Goto(seguirDial)
; preparo las variables de canal para avanzar sobre los tipicos dialplans de omnileadsdialplan_oubound_freepbx 
same => n(okcall),NoOp(La llamada se sigue procesando por Omnileads Dialplan - MANUAL CALL)
same => n,Set(QDIALER_AGENT=${CALLERID(name)})
same => n,Set(QDIALER_QUEUE=${SIP_HEADER(Nomcamp)}) ; esto se hace con nombre_campaña
; aqui se sigue con el discado, sea una manual call o discador
same => n(seguirDial),Set(PREDIAL_HOOK_RET=BYPASS)
same => n,Set(DIAL_PREFIX=${DB(dialprefix/${QDIALER_QUEUE})})
same => n,Noop(Trunk is ${OUT_${DIAL_TRUNK}})
same => n,Noop(Dialout number is ${OUTNUM})
same => n,Noop(Dial options are ${DIAL_TRUNK_OPTIONS})
same => n,NoOp(compruebo si hay un agente asignado a la llamada, sino no disco !!! )
same => n,GotoIf($["${QDIALER_AGENT}" != ""]?nextcheck)
same => n,Noop(NO AGENT?, exit normally with no tracking outbound)
same => n,MacroExit()
same => n,NoOp(compruebo si hay una cola asignada a la llamada, sino no disco !!! 
same => n(nextcheck),GotoIf($["${QDIALER_QUEUE}" != ""]?bypass)
same => n,Noop(NO QUEUE, exit normally with no tracking outbound)
same => n,MacroExit()
same => n(bypass),Set(PREDIAL_HOOK_RET=BYPASS)
same => n,Goto(queuedial,${DIAL_PREFIX}${OUTNUM},1)
same => n,MacroExit()

[queuedial]
; this piece of dialplan is just a calling hook into the [qlog-queuedial] context that actually does the
; outbound dialing - replace as needed - just fill in the same variables.
exten => _X.,1,Noop(QDIALER_QUEUE ${QDIALER_QUEUE})
same => n,Noop(QDIALER_AGENT ${QDIALER_AGENT})
same => n,Set(__RECMANUALCALL=${QDIALER_QUEUE}-${UNIQUEID}.wav)
same => n,Set(__CODCLI=${SIP_HEADER(Codcli)})
same => n,Set(__IDCampManualCall=${SIP_HEADER(Idcamp)})
same => n,Set(__TIPOLLAMADA=MANUALCALL)
same => n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
same => n,Set(MIXAG=${REPLACE(QDIALER_AGENT, ,_)})
same => n,Set(MIXAG=${REPLACE(QDIALER_AGENT,"'",)})
same => n,Set(MIXQ=${REPLACE(QDIALER_QUEUE, ,_)})
same => n,Set(MIXDEST=${EXTEN})
same => n,Set(__CALLFILENAME=out-${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)}-${MIXQ}-${CALLERID(num)}-${MIXDEST}-${UNIQUEID}.wav)
same => n,MixMonitor(${CALLFILENAME},b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${CALLFILENAME})
same => n,Set(QueueName=${QDIALER_QUEUE})
same => n,Gosub(find-route-number,${EXTEN},1)
same => n,Goto(qlog-queuedial,${EXTEN},1)

[qlog-queuedial]
; We use a global variable to pass values back from the answer-detect macro.
; STATUS = U unanswered
;        = A answered    (plus CAUSECOMPLETE=C when callee hung up)
; The 'g' dial parameter must be used in order to track callee disconnecting.
; Note that we'll be using the 'h' hook in any case to do the logging when channels go down.
;
exten => _X.,1,NoOp(Outbound call -> A:${QDIALER_AGENT} N:${EXTEN} Q:${QDIALER_QUEUE} Ch:${QDIALER_CHANNEL})
same => n,Set(OUTBOUND_GROUP=OUT_${DIAL_TRUNK})
same => n,GotoIf($["${OUTMAXCHANS_${DIAL_TRUNK}}foo" = "foo"]?nomax)
same => n,GotoIf($[ ${GROUP_COUNT(OUT_${DIAL_TRUNK})} >= ${OUTMAXCHANS_${DIAL_TRUNK}} ]?chanfull)
same => n(nomax),GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?skipoutcid)
same => n,Set(DIAL_TRUNK_OPTIONS=${TRUNK_OPTIONS})
same => n,Macro(outbound-callerid,${DIAL_TRUNK})
same => n(skipoutcid),GosubIf($["${PREFIX_TRUNK_${DIAL_TRUNK}}" != ""]?sub-flp-${DIAL_TRUNK},s,1)
same => n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
same => n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
same => n,ExecIf($[$["${MOHCLASS}" != "default"] & $["${MOHCLASS}" != ""]]?Set(DIAL_TRUNK_OPTIONS=M(setmusic^${MOHCLASS})${DIAL_TRUNK_OPTIONS}))

same => n,Set(ST=${EPOCH})
same => n,Set(GM=${REPLACE(QDIALER_AGENT, ,_)})
same => n,Set(GLOBAL(${GM})=U)
same => n,Set(GLOBAL(${GM}ans)=0)
same => n,Macro(queuelog,${ST},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ENTERQUEUE,-,${EXTEN})

same => n,GotoIf($["${custom}" = "AMP"]?customtrunk)

same => n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST})${DIAL_TRUNK_OPTIONS})
same => n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
same => n,Goto(enddial)

same => n(customtrunk),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
same => n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
same => n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
same => n,GotoIf($["${the_num}" = "OUTNUM"]?outnum:skipoutnum)
same => n(outnum),Set(the_num=${OUTNUM})
same => n(skipoutnum),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_TRUNK_OPTIONS})
same => n,Goto(enddial)

same => n(chanfull),Noop(max channels used up)
same => n(enddial),Noop(End first dial)

same => n,GotoIf($["${CAUSECOMPLETE}" = "C"]?callok)
same => n,GotoIf($["${FAILOVERTRUNKS}" = ""]?callok)

; Do a failover loop
same => n,Noop(Failed trunk call)
same => n,Set(WT=$[${EPOCH} - ${ST}])
same => n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},OUTFAIL,1,1,${WT})
same => n,Set(i=1)
same => n,While($[${i}<=${FIELDQTY(FAILOVERTRUNKS,\,)}])
same => n,Set(DIAL_TRUNK=${CUT(FAILOVERTRUNKS,\,,${i})})
same => n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
same => n,Noop(The new qdialer channel is ${QDIALER_CHANNEL})

same => n,Set(OUTBOUND_GROUP=OUT_${DIAL_TRUNK})
same => n,GotoIf($["${OUTMAXCHANS_${DIAL_TRUNK}}foo" = "foo"]?nomaxloop)
same => n,GotoIf($[ ${GROUP_COUNT(OUT_${DIAL_TRUNK})} >= ${OUTMAXCHANS_${DIAL_TRUNK}} ]?chanfullloop)
same => n(nomaxloop),GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?skipoutcidloop)
same => n,Set(DIAL_TRUNK_OPTIONS=${TRUNK_OPTIONS})
same => n,Macro(outbound-callerid,${DIAL_TRUNK})
same => n(skipoutcidloop),GosubIf($["${PREFIX_TRUNK_${DIAL_TRUNK}}" != ""]?sub-flp-${DIAL_TRUNK},s,1)
same => n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
same => n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
same => n,ExecIf($[$["${MOHCLASS}" != "default"] & $["${MOHCLASS}" != ""]]?Set(DIAL_TRUNK_OPTIONS=M(setmusic^${MOHCLASS})${DIAL_TRUNK_OPTIONS}))

same => n,GotoIf($["${custom}" = "AMP"]?customtrunkloop)

same => n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST})${DIAL_TRUNK_OPTIONS})
same => n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
same => n,Goto(enddialloop)

same => n(customtrunkloop),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
same => n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
same => n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
same => n,GotoIf($["${the_num}" = "OUTNUM"]?outnumloop:skipoutnumloop)
same => n(outnumloop),Set(the_num=${OUTNUM})
same => n(skipoutnumloop),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_TRUNK_OPTIONS})
same => n,Goto(enddialloop)

same => n(chanfullloop),Noop(max channels used up in failover loop)
same => n(enddialloop),Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
same => n,GotoIf($["${CAUSECOMPLETE}" = "C"]?callok)

same => n,Set(i=$[${i}+1])
same => n,EndWhile

same => n(callok),Noop(Call completed ok, or end failover loop)


; Trapping call termination here
exten => h,1,NoOp( "Call exiting: status ${GLOBAL(${GM})} answered at: ${GLOBAL(${GM}ans)} DS: ${DIALSTATUS}"  )
exten => h,n,Set(DB(LASTDIAL/${QDIALER_AGENT})=${EPOCH})
exten => h,n,Goto(case-${GLOBAL(${GM})})
exten => h,n,Hangup()

; Call unanswered, last attempt
exten => h,n(case-U),Set(WT=$[${EPOCH} - ${ST}])
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ABANDON,1,1,${WT})
exten => h,n,Hangup()

; call answered: agent/callee hung
exten => h,n(case-A),Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
exten => h,n,Set(WT=$[${GLOBAL(${GM}ans)} - ${ST}])
exten => h,n,Set(CT=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},${COMPLETE},${WT},${CT})
exten => h,n,UserEvent(AgentComplete,Queue: ${QDIALER_QUEUE},TalkTime: ${CT},Channel: ${CHANNEL})
exten => h,n,Hangup()


[macro-queuedial-answer]
; Expecting $ARG1: uniqueid of the caller channel
;           $ARG2: global variable to store the answer results
;           $ARG3: queue name
;           $ARG4: agent name
;           $ARG5: enterqueue
;
exten => s,1,NoOp("Macro: queuedial-answer UID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
exten => s,n,Set(QDIALER_QUEUE=${ARG3})
exten => s,n,MixMonitor(out-${QDIALER_QUEUE}-${ARG1}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${ARG1} out-${QDIALER_QUEUE}-${ARG1}.wav)
exten => s,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(WD=$[${NOW} - ${ARG5}])
exten => s,n,Macro(queuelog,${NOW},${ARG1},${ARG3},${ARG4},CONNECT,${WD})
exten => s,n,Set(GLOBAL(${ARG2})=A)
exten => s,n,Set(GLOBAL(${ARG2}ans)=${NOW})
exten => s,n,NoOp("Macro queuedial-answer terminating" )

[macro-queuelog]
; The advantage of using this macro is that you can choose whether to use the Shell version
; (where you have complete control of what gets written) or the Application version (where you
; do not need a shellout, so it's way faster).
;
; Expecting  $ARG1: Timestamp
;            $ARG2: Call-id
;            $ARG3: Queue
;            $ARG4: Agent
;            $ARG5: Verb
;            $ARG6: Param1
;            $ARG7: Param2
;            $ARG8: Param3
;
;exten => s,1,System( echo "${ARG1},${ARG2},${ARG3,${ARG4},${ARG5},${ARG6},${ARG7},${ARG8}" >> /var/log/asterisk/queue_log )
exten => s,1,QueueLog(${ARG3},${ARG2},${ARG4},${ARG5},${ARG6}|${ARG7}|${ARG8}|saliente)

#exec /usr/bin/php /usr/local/parselog/generate_outbound_route_context.php

[click2call]
exten => _XXXX,1,NoOp(llamada de click2call)
same => n,SIPAddHeader(Origin:CLICK2CALL)
same => n,SIPAddHeader(IDCliente:${codCli})
same => n,SIPAddHeader(IDCamp:${IdCamp})
same => n,Dial(SIP/${EXTEN},15,tT)
same => n,Hangup()


;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     MANEJO DE LOGIN/LOGOFF Y PAUSAS     FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
[remove-add]
exten => s,1,NoOp(flag de sesion)
same => n,Set(FLAGREMOVE=true)
same => n,Return()

[fts-pausas]
; Login
exten => 0077LOGIN,1,Verbose(2,Test func_odbc lalala)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
; logoff siempre por defecto
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${CALLERID(num)})})
same => n,Set(RESULTREMOVE=NULL)
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,NoOp(resultado: ${RQMSTATUS})
same => n,ExecIf($["${RQMSTATUS}" == "REMOVED"]?Gosub(remove-add,s,1))
same => n,EndWhile()
same => n,ODBCFinish()
same => n,GotoIf($["${FLAGREMOVE}" != "true"]?noQueuelog)
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
; comienza login
same => n(noQueuelog),Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${CALLERID(num)})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,AddQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel},${PENALTY},,${AGENTNAME})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},ADDMEMBER)
same => n,Playback(silence/1&agent-loginok)
same => n,Hangup()

exten => no_rows,1,Verbose(1,No rows returned)
same => n,Playback(silence/1&channel&not-yet-assigned)
same => n,Hangup()

; Logoff
exten => 0077LOGOUT,1,Verbose(2,Logging out of multiple queues)
;same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
;same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
;same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,NoOp(pausa: ${DB(PAUSECUSTOM/AGENT/${CALLERID(num)})})
same => n,GotoIf($["${ISNULL(${DB(PAUSECUSTOM/AGENT/${CALLERID(num)})})}]?seguir)
same => n,Verbose(2,Agent Unpaused antes de logoff)
same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${CALLERID(num)},Value: )
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},UNPAUSEALL)
same => n(seguir),Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${CALLERID(num)})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
same => n,Playback(silence/1&agent-loggedoff)
same => n,Hangup()

exten => 066LOGOUT,1,Verbose(2,logout desde originate)
;same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
;same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,Set(MemberChannel=${AGENTE})
same => n,Set(MemberChanType=SIP)
;same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,NoOp(pausa: ${DB(PAUSECUSTOM/AGENT/${AGENTE})})
same => n,GotoIf($["${ISNULL(${DB(PAUSECUSTOM/AGENT/${AGENTE})})}"]?seguir)
same => n,Verbose(2,Agent Unpaused antes de logoff)
same => n,DBDel(PAUSECUSTOM/AGENT/${AGENTE})
same => n,DBDel(fop2state/SIP/${AGENTE})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${AGENTE},Value: )
same => n,Set(AGENTNAME=${NOMBREAGENTE})
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},UNPAUSEALL)
same => n(seguir),Set(AGENTNAME=${NOMBREAGENTE})
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${AGENTE})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
same => n,Playback(silence/1&agent-loggedoff)
same => n(bye),Hangup()

; Pausa
exten => _0077[A-Z].,1,Verbose(2,Pausing member in all queues)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(PAUSETYPE=${EXTEN:4})
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel},,${PAUSETYPE})
same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=${PAUSETYPE}:${EPOCH})
same => n,Set(DB(fop2state/SIP/${CALLERID(num)})=${PAUSETYPE})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${CALLERID(num)},Value: ${PAUSETYPE})
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},PAUSEALL,${PAUSETYPE})
same => n,Playback(silence/1&unavailable)
same => n,Hangup()

; Salir de Pausa
exten => 0077UNPAUSE,1,Verbose(2,UnPausing member in all queues)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${CALLERID(num)},Value: )
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},UNPAUSEALL)
same => n,Playback(silence/1&available)
same => n,Hangup()

exten => agent_not_found,1,Verbose(2,Agent was not found)
same => n,Playback(silence/1&cannot-complete-as-dialed)

exten => 0077REMOVE,1,NoOp(agente ${CALLERID(num)} removido)
same => n,NoOp(${CALLERID(num)} removido del sistema)
same => n,NoOp(${CALLERID(num)} removido del sistema)
same => n,Hangup()

;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     GRABACIONES AL CRM EXTERNO      FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS 
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

[hangup-fts]
exten => llamante_handler,1,NoOp(Llamante_Handler)
same => n,Set(CHANNEL(hangup_handler_push)=canal-llamante,s,1); 
same => n,NoOp(Cliente: ${FROMEXTEN} - Agente: ${DIALEDPEERNUMBER} - Grab: ${CALLFILENAME})
same => n,Return

exten => llamado_handler,1,NoOp(Llamado_Handler)
same => n,Set(CHANNEL(hangup_handler_push)=canal-llamado,s,1); 
same => n,NoOp(Cliente: ${FROMEXTEN} - Agente: ${DIALEDPEERNUMBER} - Grab: ${CALLFILENAME})
same => n,Return

; por el canal llamante saco la info de las llamadas IN para luego mandar al WS
; además se ejecuta el update_mix_monitor 
[canal-llamante]
exten => s,1,NoOp(hangup canal llamante tipo de llamada ------> ENTRANTE)
same => n,NoOp(hangup canal llamante tipo de llamada ------> ENTRANTE)
same => n,NoOp(hangup canal llamante tipo de llamada ------> ENTRANTE)
;same => n,DumpChan()
same => n,GotoIf($["${TIPOLLAMADA}" == "IN"]?entrante)
same => n,Hangup()
same => n(entrante),NoOp(GRA: ${CUT(MONITOR_FILENAME,/,6)} - AG:${CUT(CUT(BRIDGEPEER,/,2),-,1)} - CLI:${CALLERID(num)} - DNI:${CUT(FROMEXTEN,-,3)} - Camp: ${SIPADDHEADER03:7})
same => n,AGI(omni-grabaciones.php,3,${DNI},${CALLERID(num)},${MEMBERINTERFACE:4},${CUT(MONITOR_FILENAME,/,6)}.wav,${SIPADDHEADER03:7},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME}.wav)
same => n,Hangup()

; por el canal llamado saco info de las llamadas manuales, PRE e ICS para luego mandar al WS
[canal-llamado]
exten => s,1,NoOp(hangup canal llamado tipo de llamada ------> DIALER o MANUALCALL)
same => n,NoOp(hangup canal llamado tipo de llamada ------> DIALER o MANUALCALL)
same => n,NoOp(hangup canal llamado tipo de llamada ------> DIALER o MANUALCALL)
;same => n,DumpChan()
same => n,GotoIf($["${TIPOLLAMADA}" == "MANUALCALL"]?manual)
same => n,GotoIf($["${TIPOLLAMADA}" == "DIALER"]?dialer)
same => n,Hangup()
same => n(dialer),NoOp(GRA:${MONITOR_FILENAME}.wav - CLI:${NUMMARCADO} - AG:${MEMBERINTERFACE:4} - CODCLI:${ID_CLIENTE} - )
same => n,AGI(omni-grabaciones.php,2,${ID_CLIENTE},${NUMMARCADO},${MEMBERINTERFACE:4},${MONITOR_FILENAME}.wav,${ID_CAMPANA},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME}.wav)
same => n,Hangup()
same => n(manual),NoOp(GRA:${CALLFILENAME} - CLI:${CUT(DIALEDPEERNUMBER,/,2)} - AG:SIP/${FROMEXTEN} - CODCLI:${CODCLI})
same => n,AGI(omni-grabaciones.php,4,${DNI},${CUT(DIALEDPEERNUMBER,/,2)},${FROMEXTEN},${CALLFILENAME},${IDCampManualCall},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME}.wav)
same => n,Hangup()

;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     SUPERVISION DALPLAN   FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

[fts-sup]
exten => _001X.,1,NoOp(Channel Spy)
same => n,ChanSpy(SIP/${EXTEN:3},sb)
same => n,Hangup()

exten => _002X.,1,NoOp(Channel Spy and Wishper)
same => n,ChanSpy(SIP/${EXTEN},swb)
same => n,Hangup()

exten => _003X.,1,NoOp(Agent Logoff)
same => n,GotoIf($["${SIP_HEADER(supToken)}" == "abc098"]?pasa)
same => n,Hangup()
same => n(pasa),NoOp(Agente: ${EXTEN:3})
same => n,DBDel(PAUSECUSTOM/AGENT/${EXTEN:3})
same => n,DBDel(fop2state/SIP/${EXTEN:3})
same => n,Set(MemberChannel=${EXTEN:3})
same => n,Set(MemberChanType=SIP)
same => n,Set(AGENTNAME=${SIP_HEADER(nombreAgente)}) 
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${EXTEN:3})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
same => n,Playback(silence/1&agent-loggedoff)
same => n,Hangup()

exten => _004X.,1,NoOp(Agent Pause)
same => n,GotoIf($["${SIP_HEADER(supToken)}" == "abc098"]?pasa)
same => n,Hangup()
same => n(pasa),NoOp(Agente: ${EXTEN:3})
same => n,Set(MemberChannel=${EXTEN:3})
same => n,Set(MemberChanType=SIP)
same => n,Set(PAUSETYPE=Supervisor)
same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel},,${PAUSETYPE})
same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
same => n,Set(DB(PAUSECUSTOM/AGENT/${EXTEN:3})=${PAUSETYPE}:${EPOCH})
same => n,Set(DB(fop2state/SIP/${EXTEN:3})=${PAUSETYPE})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${EXTEN:3},Value: ${PAUSETYPE})
same => n,Playback(silence/1&unavailable)
same => n,Hangup()

exten => _005X.,1,NoOp(Tomar llamada)
;same => n,ChanSpy(SIP/${EXTEN})
same => n,Hangup()

exten => _006X.,1,NoOp(Conferencia)
same => n,ChanSpy(SIP/${EXTEN},swbB)
same => n,Hangup()


exten => _007X.,1,NoOp(Agent Un-Pause)
same => n,GotoIf($["${SIP_HEADER(supToken)}" == "abc098"]?pasa)
same => n,Hangup()
same => n(pasa),NoOp(Agente: ${EXTEN:3})
same => n,Set(MemberChannel=${EXTEN:3})
same => n,Set(MemberChanType=SIP)
same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
same => n,DBDel(PAUSECUSTOM/AGENT/${EXTEN:3})
same => n,DBDel(fop2state/SIP/${EXTEN:3})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${EXTEN:3},Value: )
same => n,Playback(silence/1&available)
same => n,Hangup()

exten => agent_not_found,1,Verbose(2,Agent was not found)
same => n,Playback(silence/1&cannot-complete-as-dialed)






;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     WOMBAT DIALER DALPLAN   FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

; por aca se disca hacia afuera
;[from-wombat-genericas]
;exten => _X.,1,NoOp(wombat dialer caller-id-es ${CUT(CONTEXT,-,2)})
;same => n,NoOp(${GRUPO})
;same => n,Dial(SIP/test/${EXTEN},45,tTB(hangup-fts^llamante_handler^1)b(hangup-fts^llamado_handler^1))
;same => n,Hangup()

[from-wombat-general-contact]
exten => 098098,1,NoOp(Wombat Dialer Queue)
same => n,Background(silence/1)
;same => n,NoOp(contestador: ${USA_CONTESTADOR} - wombatid: ${0i;})
same => n,GotoIf($["${USA_CONTESTADOR}" != "True"]?noamd)
same => n,AMD()
same => n,NoOp(AMDSTATUS=${AMDSTATUS})
same => n,GotoIf($["${AMDSTATUS}" == "MACHINE"]?amd_machine)
same => n(noamd),NoOp(hay un humano por alli)
same => n,Set(AUX=${CUT(CHANNEL,@,1)})
same => n,Set(NUMMARCADO=${CUT(AUX,/,2)})
;same => n,DumpChan()	
same => n,Set(__MONITOR_FILENAME=q-${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)}-${CAMPANA}-${NUMMARCADO}-${UNIQUEID})
same => n,Set(__MONITOR_EXEC=/usr/local/parselog/update_mix_mixmonitor.pl ^{UNIQUEID} ^{MIXMONITOR_FILENAME})
same => n,Set(__TIPOLLAMADA=DIALER)
same => n,SIPAddHeader(WombatID:${WOMBAT_HOPPER_ID})
same => n,SIPAddHeader(Origin:DIALER)
same => n,SIPAddHeader(IDCliente:${ID_CLIENTE})
same => n,SIPAddHeader(IDCamp:${ID_CAMPANA})
same => n,MixMonitor(${MONITOR_FILENAME}.wav,b)
same => n,Set(CALLERID(num)=${NUMMARCADO})
same => n,Gosub(hangup-fts,llamado_handler,1)
same => n,Queue(${CAMPANA},tTc,,,${TIMEOUT})
same => n,Hangup()
same => n(amd_machine),NoOp(es una maquina)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:CONTESTADOR)
same => n,Hangup()